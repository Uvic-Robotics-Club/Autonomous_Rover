// Generated by gencpp from file drivetrain/Speed.msg
// DO NOT EDIT!


#ifndef DRIVETRAIN_MESSAGE_SPEED_H
#define DRIVETRAIN_MESSAGE_SPEED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drivetrain
{
template <class ContainerAllocator>
struct Speed_
{
  typedef Speed_<ContainerAllocator> Type;

  Speed_()
    : leftspeed(0)
    , rightspeed(0)
    , leftdirection(0)
    , rightdirection(0)  {
    }
  Speed_(const ContainerAllocator& _alloc)
    : leftspeed(0)
    , rightspeed(0)
    , leftdirection(0)
    , rightdirection(0)  {
  (void)_alloc;
    }



   typedef int64_t _leftspeed_type;
  _leftspeed_type leftspeed;

   typedef int64_t _rightspeed_type;
  _rightspeed_type rightspeed;

   typedef int64_t _leftdirection_type;
  _leftdirection_type leftdirection;

   typedef int64_t _rightdirection_type;
  _rightdirection_type rightdirection;





  typedef boost::shared_ptr< ::drivetrain::Speed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drivetrain::Speed_<ContainerAllocator> const> ConstPtr;

}; // struct Speed_

typedef ::drivetrain::Speed_<std::allocator<void> > Speed;

typedef boost::shared_ptr< ::drivetrain::Speed > SpeedPtr;
typedef boost::shared_ptr< ::drivetrain::Speed const> SpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drivetrain::Speed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drivetrain::Speed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drivetrain::Speed_<ContainerAllocator1> & lhs, const ::drivetrain::Speed_<ContainerAllocator2> & rhs)
{
  return lhs.leftspeed == rhs.leftspeed &&
    lhs.rightspeed == rhs.rightspeed &&
    lhs.leftdirection == rhs.leftdirection &&
    lhs.rightdirection == rhs.rightdirection;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drivetrain::Speed_<ContainerAllocator1> & lhs, const ::drivetrain::Speed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drivetrain

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drivetrain::Speed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drivetrain::Speed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drivetrain::Speed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drivetrain::Speed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drivetrain::Speed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drivetrain::Speed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drivetrain::Speed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e411503b1c3b7e55df6f17adf4515654";
  }

  static const char* value(const ::drivetrain::Speed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe411503b1c3b7e55ULL;
  static const uint64_t static_value2 = 0xdf6f17adf4515654ULL;
};

template<class ContainerAllocator>
struct DataType< ::drivetrain::Speed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drivetrain/Speed";
  }

  static const char* value(const ::drivetrain::Speed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drivetrain::Speed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 leftspeed\n"
"int64 rightspeed\n"
"int64 leftdirection\n"
"int64 rightdirection\n"
;
  }

  static const char* value(const ::drivetrain::Speed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drivetrain::Speed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leftspeed);
      stream.next(m.rightspeed);
      stream.next(m.leftdirection);
      stream.next(m.rightdirection);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Speed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drivetrain::Speed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drivetrain::Speed_<ContainerAllocator>& v)
  {
    s << indent << "leftspeed: ";
    Printer<int64_t>::stream(s, indent + "  ", v.leftspeed);
    s << indent << "rightspeed: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rightspeed);
    s << indent << "leftdirection: ";
    Printer<int64_t>::stream(s, indent + "  ", v.leftdirection);
    s << indent << "rightdirection: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rightdirection);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRIVETRAIN_MESSAGE_SPEED_H
